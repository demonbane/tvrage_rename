#!/usr/bin/env ruby

# tvrage_rename - Rename media files using TVRage info
# (c) 2010 Alex Malinovich (alex@malinovich.name)
# Released under the GPL v2 or later
# See www.fsf.org for a full copy of the GPL.
#
# If you have a problem with the GPL, cry about it on
# Twitter. Because I care. Really...

require 'rubygems'
require 'open-uri'
require 'nokogiri'
require 'cgi'
require 'timeout'

APPVERSION="v0.4.4"

@@opts = {:quiet => false, :dryrun => false, :debug => false, :force => false}
filenames = []

def print_help
  puts "Usage: #{File.basename($0)} [OPTION]... FILENAMES..."
  puts "Look up TVRage info for FILENAME based on season/episode numbers, and rename"
  puts "file to show full episode name."
  puts ""
  puts "  -q	Run quietly (no output except on errors)"
  puts "  -d    Dry run. Print what would be done, but don't actually do it."
  puts "  -D    Debug mode. Implies -d."
  puts "  -f    Force run. Skip all validations and force rename."
  puts "  -c    Clean names. Remove unsafe filename characters from names."
  puts "  -v    Print version number and exit."
  puts "  -h	Show this screen"
  puts ""
  exit 0
end

def print_version
  puts "#{File.basename($0)} #{APPVERSION}"
  exit 0
end

begin
  curarg = ARGV.shift 
  case curarg
  when "-q"
    @@opts[:quiet] = true
  when "-d"
    @@opts[:dryrun] = true
  when "-D"
    @@opts[:dryrun] = @@opts[:debug] = true
  when "-f"
    @@opts[:force] = true
  when "-c"
    @@opts[:clean] = true
  when "-h", "-H", "--help", "help"
    print_help
  when "-v", "--version"
    print_version
  when nil
    break
  else
    if File.exists?(curarg)
      filenames.push(curarg)
    else
      filenames += Dir.glob(curarg)
    end
  end
end while ARGV
  
abort "No filenames provided, aborting." if filenames.empty?

class Episode

  EPREGEX=/[Ss][0-9]{1,2}[Ee][0-9]{1,2}/
  ENDPOINT="http://services.tvrage.com/feeds/episodeinfo.php"
  CLEANREGEX=/[\\\/:*?"<>|!]/

  attr_accessor :ep_index, :show_name, :episode_name, :season_number, :episode_number, :file_type

  def initialize(filename)
    @orig_file_name = filename
    @file_path = File.dirname(File.expand_path(filename))
    @file_name = File.basename(File.expand_path(filename))
    @file_type = @file_name.split(".")[-1]
    @fullname = File.basename(@file_name, ".#{@file_type}").split(".")
    abort "no index" unless ep_index
  end

  def debug
    STDERR.puts "file_path=#{@file_path}\nfile_name=#{@file_name}\nfile_type=#{@file_type}\nfullname=#{@fullname}"
    STDERR.puts "tvrage_result=#{tvrage_result}"
    STDERR.puts "foobarbaz == foobarbaz"
  end

  def save!
    STDERR.print "\nProcessing #{@orig_file_name}... " if @@opts[:debug]
    if validate!
      new_file_name = "#{show_name.gsub(" ", ".")}.S#{season_number}E#{episode_number}.#{episode_name.gsub(" ", ".")}.#{file_type}"
      puts "#{@orig_file_name} -> #{new_file_name}" unless @@opts[:quiet]
      File.rename(@orig_file_name, "#{@file_path}/#{new_file_name}") unless @@opts[:dryrun]
      return true
    else
      puts @abortmsg unless @@opts[:quiet]
      return false
    end
  end

  def validate!
    STDERR.puts "\norig_show_name = '#{orig_show_name}'\nshow_name = '#{show_name}'\nseason_number = '#{season_number}'\nepisode_number = '#{episode_number}'" if @@opts[:debug]
    debug if @@opts[:debug]
    if @abortmsg || tvrage_result
      # skip rest of checks
    elsif (show_name.upcase != orig_show_name.upcase)
      @abortmsg = "name mismatch ('#{show_name}' -> '#{orig_show_name}')"
    elsif season_number.to_i != orig_season_number.to_i
      @abortmsg = "season number mismatch ('#{season_number}' -> '#{orig_season_number}')"
    elsif episode_number.to_i != orig_episode_number.to_i
      @abortmsg = "episode number mismatch ('#{episode_number}' -> '#{orig_episode_number}')"
    end
    @abortmsg.nil? || @@opts[:force]
  end

  def parse_numbers(offset)
    @numbers ||= ep_index_body.split(/[[:alpha:]]/).compact.reject(&:empty?)
    @numbers[offset]
  end

  def orig_season_number
    @orig_season_number ||= parse_numbers(0)
  end

  def orig_episode_number
    @orig_episode_number ||= parse_numbers(1)
  end

  def season_number
    @season_number ||= tvrage_result.xpath("//show/episode/number").text.split("x").first if tvrage_result
    return @season_number if @season_number
    @season_number = "No season"
  end

  def episode_number
    @episode_number ||= tvrage_result.xpath("//show/episode/number").text.split("x").last if tvrage_result
    return @episode_number if @episode_number
    @episode_number = "No episode"
  end

  def ep_index
    @ep_index ||= @fullname.find_index {|i| i =~ EPREGEX}
  end

  def ep_index_body
    @fullname[@ep_index]
  end

  def orig_show_name
    showname = @fullname[0..(ep_index-1)].join(" ")
    showname = clean_string(showname) if @@opts[:clean]
    showname = "The Office (US)" if showname.eql?("The Office")
    showname
  end

  def clean_string(mystr)
    STDERR.puts "Cleaning \"#{mystr}\" to \"#{mystr.gsub(CLEANREGEX, "")}\"" if @@opts[:debug]
    mystr.gsub(CLEANREGEX, "")
  end

  def orig_episode_name
    epname = @fullname[(ep_index+1)..-1].join(" ")
    epname = clean_string(epname) if @@opts[:clean]
    return epname
  end

  def episode_name
    epname = tvrage_result.xpath("//show/episode/title").text if tvrage_result
    epname = "No episode" unless tvrage_result
    epname = clean_string(epname) if @@opts[:clean]
    return epname
  end

  def show_name
    showname = tvrage_result.xpath("//show/name").text if tvrage_result
    showname = clean_string(showname) if @@opts[:clean]
    showname = "The Office" if showname.eql?("The Office (US)")
    return showname if tvrage_result
    "No show"
  end

  def tvrage_result
    begin
      timeout(10) do
        @tvrage_result ||= Nokogiri::XML(open("#{ENDPOINT}?show=#{CGI.escape(orig_show_name)}&exact=1&ep=#{CGI.escape(orig_season_number)}x#{CGI.escape(orig_episode_number)}", "User-Agent" => "Ruby/#{RUBY_VERSION}"))
      end
    rescue Timeout::Error
      @abortmsg = "Timed out on '#{@orig_file_name}', exiting."
      @tvrage_result = false
    end
  end

end

filenames.each do |filename|
  Episode.new(filename).save!
end
